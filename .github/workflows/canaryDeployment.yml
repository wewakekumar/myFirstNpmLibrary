name: Deploy to canary

on: 
  workflow_dispatch:
    inputs:
      deploymentType:
        description: 'Deployment type'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback
      deployTraffic:
        description: 'Deploy traffic to new version'
        required: true
        default: '0'
        type: choice
        options:
        - '0'
        - '5'
        - '10'
        - '30'
        - '50'
        - '100'
      version:
        description: 'Build version'
        required: true
        default: 'latest'
        type: choice
        options:
        - latest
        - 1.4.1
        - 1.5.1
        - 1.6.1
        - 1.7.1
        - 1.8.1
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Build app
        run: npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-south-1
      - name: Push artifact to s3 bucket
        if: inputs.deploymentType == 'deploy' && inputs.deployTraffic == '0'
        env: 
          VERSION: ${{ inputs.version }}
          S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        run: |
          aws s3 sync ./dist "s3://$S3_BUCKET_NAME/$VERSION"
      - name: Start deployment with 0% traffic
        if: inputs.deploymentType == 'deploy' && inputs.deployTraffic == '0'
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          CLOUDFRONT_ORIGIN_ID: ${{ secrets.AWS_CLOUDFRONT_ORIGIN_ID }}
          VERSION: ${{ inputs.version }}
          LAMBDA_FUNCTION_CONFIG: ${{ secrets.AWS_LAMBDA_FUNCTION_CONFIG}}
          CANARY_SSM_KEY: ${{ secrets.AWS_CANARY_SSM_KEY }}
        run: |
          aws ssm put-parameter --name $CANARY_SSM_KEY --type "StringList" --value "true,0,$VERSION" --overwrite
          
          aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID > current-distribution-config.json

          Etag=`cat "current-distribution-config.json" | jq '.ETag' | tr -d \"`

          echo $LAMBDA_FUNCTION_CONFIG > lambda-associations.json

          cat "current-distribution-config.json" | jq \
            --slurpfile associations lambda-associations.json \
            '.Distribution.DistributionConfig | 
             .DefaultCacheBehavior.LambdaFunctionAssociations = {
                "Quantity": ($associations | .[0] | length),
                "Items": $associations[0]
              }' \
            > "latest-distribution-config.json"

          aws cloudfront update-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --distribution-config "file://latest-distribution-config.json" \
            --if-match $Etag \
            > /dev/null

          rm current-distribution-config.json latest-distribution-config.json

      - name: Increase traffic
        if: inputs.deploymentType == 'deploy' && inputs.deployTraffic != '0' && && inputs.deployTraffic != '100'
        env:
          VERSION: ${{ inputs.version }}
          DEPLOY_TRAFFIC: ${{ inputs.deployTraffic }}
          CANARY_SSM_KEY: ${{ secrets.AWS_CANARY_SSM_KEY }}
        run: |
          aws ssm put-parameter --name $CANARY_SSM_KEY --type "StringList" --value "true,$DEPLOY_TRAFFIC,$VERSION" --overwrite

      - name: Rollback
        if: inputs.deploymentType == 'rollback'
        env:
          VERSION: ${{ inputs.version }}
          DEPLOY_TRAFFIC: ${{ inputs.deployTraffic }}
          CANARY_SSM_KEY: ${{ secrets.AWS_CANARY_SSM_KEY }}
        run: |
          aws ssm put-parameter --name $CANARY_SSM_KEY --type "StringList" --value "false,$DEPLOY_TRAFFIC,$VERSION" --overwrite

      - name: Promote
        if: inputs.deploymentType == 'deploy' && inputs.deployTraffic == '100'
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          CLOUDFRONT_ORIGIN_ID: ${{ secrets.AWS_CLOUDFRONT_ORIGIN_ID }}
          VERSION: ${{ inputs.version }}
        run: |
          aws cloudfront get-distribution --id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} > current-distribution-config.json

          Etag=`cat "current-distribution-config.json" | jq '.ETag' | tr -d \"`
          
          cat "current-distribution-config.json" | jq \
            --arg targetOriginId $CLOUDFRONT_ORIGIN_ID \
            --arg newOriginPath "/$VERSION" \
            '.Distribution.DistributionConfig | 
             .DefaultCacheBehavior.LambdaFunctionAssociations = {
                "Quantity": 0,
                "Items": []
              } |
             .Origins.Items = (.Origins.Items | map(if (.Id == $targetOriginId) then (.OriginPath = $newOriginPath) else . end))' \
            > "latest-distribution-config.json"

          aws cloudfront update-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --distribution-config "file://latest-distribution-config.json" \
            --if-match $Etag \
            > /dev/null

          rm current-distribution-config.json latest-distribution-config.json
